{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","DELAY","CountdownTimer","selector","targetDate","onTick","intervalId","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","pad","Math","floor","value","String","padStart","timer","updateClockFace","textContent","start"],"mappings":";;;AAkDC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlDD,QAAA,gBAEA,IAAMA,EAAO,CACTC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAG3BI,EAAQ,IAERC,EAAAA,WAC4C,SAAA,EAAA,GAAhCC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAU,EAAA,KAAA,GACrCC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EAkCrB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAhCW,MAAA,WAAA,IAAA,EAAA,KACCC,KAAAA,WAAaC,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKP,WAAaI,EAC9BI,EAAO,EAAKC,kBAAkBF,GACpC,EAAKN,OAAOO,IACbX,KA0BV,CAAA,IAAA,oBAxBqBW,MAAAA,SAAAA,GAKP,MAAA,CAAEjB,KAJI,KAAKmB,IAAIC,KAAKC,MAAMJ,EAAQ,QAI1Bd,MAHD,KAAKgB,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAG9Cb,KAFT,KAAKe,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAElCZ,KADf,KAAKc,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,SAoB/D,CAAA,IAAA,MAjBOK,MAAAA,SAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAgBxC,EAvCKjB,GA2BAkB,EAAQ,IAAIlB,EAAe,CAC7BC,SAAU,WACVC,WAAY,IAAIK,KAAK,gBACrBJ,OAAQgB,IAIZ,SAASA,EAA6C,GAA3B1B,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC1CN,EAAKC,KAAK2B,YAAiB3B,GAAAA,OAAAA,GAC3BD,EAAKI,MAAMwB,YAAiBxB,GAAAA,OAAAA,GAC5BJ,EAAKK,KAAKuB,YAAiBvB,GAAAA,OAAAA,GAC3BL,EAAKM,KAAKsB,YAAiBtB,GAAAA,OAAAA,GAN/BoB,EAAMG","file":"js-hw-11-timer.df921637.js","sourceRoot":"..","sourcesContent":["import './styles.css';\r\n\r\nconst refs = {\r\n    days: document.querySelector('[data-value=\"days\"]'),\r\n    hours: document.querySelector('[data-value=\"hours\"]'),\r\n    mins: document.querySelector('[data-value=\"mins\"]'),\r\n    secs: document.querySelector('[data-value=\"secs\"]'),\r\n}\r\n\r\nconst DELAY = 1000;\r\n\r\nclass CountdownTimer {\r\n    constructor({ selector, targetDate, onTick }) {\r\n        this.intervalId = null;\r\n        this.selector = selector;\r\n        this.targetDate = targetDate;\r\n        this.onTick = onTick;\r\n    };\r\n    start() {\r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const deltaTime = this.targetDate - currentTime;\r\n            const time = this.getTimeComponents(deltaTime);\r\n            this.onTick(time)\r\n        }, DELAY)\r\n    }\r\n    getTimeComponents(time) {\r\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n        return { days, hours, mins, secs };\r\n    };\r\n    pad(value) {\r\n        return String(value).padStart(2, \"0\");\r\n    }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('Jan 01, 2023'),\r\n    onTick: updateClockFace,\r\n});\r\ntimer.start()\r\n\r\nfunction updateClockFace({ days, hours, mins, secs }) {\r\n    refs.days.textContent = `${days}`;\r\n    refs.hours.textContent = `${hours}`;\r\n    refs.mins.textContent = `${mins}`;\r\n    refs.secs.textContent = `${secs}`;\r\n}\r\n\r\n\r\n\r\n\r\n"]}